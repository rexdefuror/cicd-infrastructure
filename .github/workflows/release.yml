name: Release Pipeline

on:
  workflow_dispatch:
    inputs:
      cicd-project-1:
        description: "Include cicd-project-1?"
        required: true
        default: false
        type: boolean
      cicd-project-1-version:
        description: "cicd-project-1 version (latest, #.#.#)"
        required: false
        default: "latest"
        type: string
      cicd-project-2:
        description: "Include cicd-project-2?"
        required: true
        default: false
        type: boolean
      cicd-project-2-version:
        description: "cicd-project-2 version (latest, #.#.#)"
        required: false
        default: "latest"
        type: string

env:
  cicd-project-1: ${{ github.event.inputs.cicd-project-1 }}
  cicd-project-1-version: ${{ github.event.inputs.cicd-project-1-version }}
  cicd-project-2: ${{ github.event.inputs.cicd-project-2 }}
  cicd-project-2-version: ${{ github.event.inputs.cicd-project-2-version }}

jobs:
  ## there are total of two environments to deploy to (dev, qa)
  ## each environment has two projects to deploy (cicd-project-1, cicd-project-2)
  ## cicd-project-1 and cicd-project-2 are first deployed to dev, then if manual approval is given, they are deployed to qa
  ## cicd-project-1 and cicd-project-2 are deployed to dev and qa in parallel
  ## to deploy the projects, cicd-project-1 and cicd-project-2 are downloaded from the artifacts of cicd-project-1 and cicd-project-2
  ## if cicd-project-1 and cicd-project-2 are not included in the release, they are not deployed
  ## cicd-project-1 is located in cicd-project-1 repository
  ## cicd-project-2 is located in cicd-project-2 repository

  deploy-to-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    steps:
      ## if version is latest, get last tag from cicd-project-1 repository
      - name: Get cicd-project-1 version
        if: env.cicd-project-1 == 'true' && env.cicd-project-1-version == 'latest'
        id: get_cicd-project-1_version
        uses: tdemin/find-latest-tag@v1
        with:
          repo: https://github.com/rexdefuror/cicd-project-1.git
      ## substring the v from the tag and then set cicd-project-1-version environment variable to latest tag if version is latest
      - name: Set cicd-project-1 version
        if: env.cicd-project-1 == 'true' && env.cicd-project-1-version == 'latest'
        uses: actions/github-script@v6
        with:
          script: |
            const cicdProject1_version = '${{ steps.get_cicd-project-1_version.outputs.tag }}'
            const cicdProject1_version_substring = cicdProject1_version.substring(1)
            core.exportVariable('cicd-project-1-version', cicdProject1_version_substring)
      ## if version is latest, get last tag from cicd-project-2 repository
      - name: Get cicd-project-2 version
        if: env.cicd-project-2 == 'true' && env.cicd-project-2-version == 'latest'
        id: get_cicd-project-2_version
        uses: tdemin/find-latest-tag@v1
        with:
          repo: https://github.com/rexdefuror/cicd-project-2.git
      ## substring the v from the tag and then set cicd-project-1-version environment variable to latest tag if version is latest
      - name: Set cicd-project-2 version
        if: env.cicd-project-2 == 'true' && env.cicd-project-2-version == 'latest'
        uses: actions/github-script@v6
        with:
          script: |
            const cicdProject2_version = '${{ steps.get_cicd-project-2_version.outputs.tag }}'
            const cicdProject2_version_substring = cicdProject2_version.substring(1)
            core.exportVariable('cicd-project-2-version', cicdProject2_version_substring)
      ## if cicd-project-1 is included in the release, download cicd-project-1 artifact from cicd-project-1 repository
      - name: Download cicd-project-1 artifact
        id: download_cicd-project-1
        if: ${{ env.cicd-project-1 == 'true' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build.yml
          workflow_conclusion: success
          name: cicd-project-1_v${{ env.cicd-project-1-version }}
          path: cicd-project-1
          repo: rexdefuror/cicd-project-1
          branch: main
          search_artifacts: true
          if_no_artifact_found: fail
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: cicd-project-1
      ## if cicd-project-2 is included in the release, download cicd-project-2 artifact from cicd-project-2 repository
      - name: Download cicd-project-2 artifact
        id: download_cicd-project-2
        if: ${{ env.cicd-project-2 == 'true' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build.yml
          workflow_conclusion: success
          name: cicd-project-2_v${{ env.cicd-project-2-version }}
          path: cicd-project-2
          repo: rexdefuror/cicd-project-2
          branch: main
          search_artifacts: true
          if_no_artifact_found: fail
      ## if cicd-project-1 is included in the release, deploy cicd-project-1 to dev
      - name: Deploy cicd-project-1 to dev
        if: ${{ env.cicd-project-1 == 'true' }}
        run: |
          echo "Deploying cicd-project-1 to dev"
      ## if cicd-project-2 is included in the release, deploy cicd-project-2 to dev
      - name: Deploy cicd-project-2 to dev
        if: ${{ env.cicd-project-2 == 'true' }}
        run: |
          echo "Deploying cicd-project-2 to dev"
      ## await manual approval to deploy to qa
      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: rexdefuror
          minimum-approvals: 1
          issue-title: "Approve deploy to qa for cicd-project-1 - v${{ env.cicd-project-1-version }} and cicd-project-2 - v${{ github.event.inputs.cicd-project-2-version }}"
          exclude-workflow-initiator-as-approver: false
  deploy-to-qa:
    name: Deploy to QA
    runs-on: ubuntu-latest
    needs: deploy-to-dev
    steps:
      - name: Get cicd-project-1 version
        if: env.cicd-project-1 == 'true' && env.cicd-project-1-version == 'latest'
        id: get_cicd-project-1_version
        uses: tdemin/find-latest-tag@v1
        with:
          repo: https://github.com/rexdefuror/cicd-project-1.git
      ## substring the v from the tag and then set cicd-project-1-version environment variable to latest tag if version is latest
      - name: Set cicd-project-1 version
        if: env.cicd-project-1 == 'true' && env.cicd-project-1-version == 'latest'
        uses: actions/github-script@v6
        with:
          script: |
            const cicdProject1_version = '${{ steps.get_cicd-project-1_version.outputs.tag }}'
            const cicdProject1_version_substring = cicdProject1_version.substring(1)
            core.exportVariable('cicd-project-1-version', cicdProject1_version_substring)
      ## if version is latest, get last tag from cicd-project-2 repository
      - name: Get cicd-project-2 version
        if: env.cicd-project-2 == 'true' && env.cicd-project-2-version == 'latest'
        id: get_cicd-project-2_version
        uses: tdemin/find-latest-tag@v1
        with:
          repo: https://github.com/rexdefuror/cicd-project-2.git
      ## substring the v from the tag and then set cicd-project-1-version environment variable to latest tag if version is latest
      - name: Set cicd-project-2 version
        if: env.cicd-project-2 == 'true' && env.cicd-project-2-version == 'latest'
        uses: actions/github-script@v6
        with:
          script: |
            const cicdProject2_version = '${{ steps.get_cicd-project-2_version.outputs.tag }}'
            const cicdProject2_version_substring = cicdProject2_version.substring(1)
            core.exportVariable('cicd-project-2-version', cicdProject2_version_substring)
      ## if cicd-project-1 is included in the release, download cicd-project-1 artifact from cicd-project-1 repository
      - name: Download cicd-project-1 artifact
        id: download_cicd-project-1
        if: ${{ env.cicd-project-1 == 'true' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build.yml
          workflow_conclusion: success
          name: cicd-project-1_v${{ env.cicd-project-1-version }}
          path: cicd-project-1
          repo: rexdefuror/cicd-project-1
          branch: main
          search_artifacts: true
          if_no_artifact_found: fail
      ## if cicd-project-2 is included in the release, download cicd-project-2 artifact from cicd-project-2 repository
      - name: Download cicd-project-2 artifact
        id: download_cicd-project-2
        if: ${{ env.cicd-project-2 == 'true' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build.yml
          workflow_conclusion: success
          name: cicd-project-2_v${{ env.cicd-project-2-version }}
          path: cicd-project-2
          repo: rexdefuror/cicd-project-2
          branch: main
          search_artifacts: true
          if_no_artifact_found: fail
      ## if cicd-project-1 is included in the release, deploy cicd-project-1 to qa
      - name: Deploy cicd-project-1 to qa
        if: ${{ env.cicd-project-1 == 'true' }}
        run: |
          echo "Deploying cicd-project-1 to qa"
      ## if cicd-project-2 is included in the release, deploy cicd-project-2 to qa
      - name: Deploy cicd-project-2 to qa
        if: ${{ env.cicd-project-2 == 'true' }}
        run: |
          echo "Deploying cicd-project-2 to qa"
